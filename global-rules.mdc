---
description: Josh Dunigan's global coding standards and best practices for all projects
globs: ["**/*.{js,jsx,ts,tsx,md,css,scss,html,py}"]
---

# Josh Dunigan's Coding Standards

@context {
    "type": "cursor_rules",
    "purpose": "global_standards",
    "format_version": "1.0.0",
    "supported_languages": [
        "javascript",
        "typescript",
        "python",
        "markdown",
        "html",
        "css"
    ]
}

@structure {
    "required_sections": [
        "code_organization",
        "naming_conventions",
        "documentation",
        "git_practices"
    ],
    "recommended_sections": [
        "testing",
        "performance",
        "security"
    ]
}

## Code Organization Guidelines
### File Structure

@file_structure_rules [
    {
        "id": "modular_organization",
        "rule": "Organize code into modular, single-purpose files",
        "severity": "warning"
    },
    {
        "id": "file_length",
        "rule": "Keep files under 300 lines when possible",
        "severity": "warning"
    },
    {
        "id": "logical_grouping",
        "rule": "Group related files in focused directories",
        "severity": "suggestion"
    },
    {
        "id": "consistent_imports",
        "rule": "Use consistent import ordering: 1) framework/library imports, 2) external modules, 3) internal modules",
        "severity": "warning"
    }
]

### Component Structure

@component_rules {
    "react": {
        "structure": "Begin with imports, then prop types/interfaces, constants, hooks/state, helper functions, effect hooks, render method",
        "composition": "Prefer composition over inheritance",
        "props": "Destructure props at the top level of the component function"
    },
    "general": {
        "single_responsibility": "Each component should have a single responsibility",
        "purity": "Functions should be pure when possible",
        "side_effects": "Isolate side effects into clearly labeled sections"
    }
}

## Naming Conventions

@naming_rules {
    "files": {
        "react_components": "PascalCase.jsx/tsx",
        "utilities": "camelCase.js/ts",
        "constants": "UPPER_SNAKE_CASE.js/ts or camelCase.js/ts",
        "tests": "ComponentName.test.js/ts"
    },
    "variables": {
        "constants": "UPPER_SNAKE_CASE for true constants, camelCase for configuration values",
        "variables": "camelCase",
        "booleans": "Prefix with 'is', 'has', 'should', etc."
    },
    "functions": {
        "general": "camelCase, verb + noun (e.g. getData, calculateTotal)",
        "react_hooks": "Prefix with 'use'",
        "event_handlers": "Prefix with 'handle' (e.g. handleClick)"
    },
    "classes": {
        "class_names": "PascalCase, nouns",
        "interfaces": "PascalCase, prefixed with 'I' or describing the contract"
    },
    "css": {
        "classes": "kebab-case or BEM notation",
        "ids": "camelCase"
    }
}

## Documentation Standards

@documentation_rules {
    "general": {
        "clarity": "Write documentation with the audience in mind",
        "examples": "Include practical examples for complex functionality",
        "diagrams": "Use diagrams for architecture and data flow"
    },
    "code_comments": {
        "purpose": "Explain 'why' not 'what'",
        "format": "Use JSDoc/TSDoc for JavaScript/TypeScript",
        "todos": "Include the issue tracker ID in TODOs"
    },
    "readme": {
        "sections": [
            "Project overview",
            "Installation",
            "Quick start",
            "Configuration",
            "API reference",
            "Contributing"
        ]
    },
    "typescript": {
        "interfaces": "Document all interfaces and types",
        "generics": "Explain generic type parameters",
        "return_values": "Document return types and side effects"
    }
}

## Git Practices

@git_rules {
    "branches": {
        "naming": "Use feature/, bugfix/, refactor/, docs/ prefixes",
        "lifetime": "Delete branches after merging"
    },
    "commits": {
        "messages": "Use conventional commits format: <type>(<scope>): <description>",
        "scope": "Indicate affected module/component",
        "atomicity": "Make small, focused commits"
    },
    "pull_requests": {
        "title": "Follow the same convention as commit messages",
        "description": "Include context, changes, and testing steps",
        "size": "Keep PRs under 400 lines of code when possible"
    },
    "workflow": {
        "rebase": "Prefer rebase over merge for integrating upstream changes",
        "squash": "Squash commits before merging to main"
    }
}

## JavaScript/TypeScript Guidelines
### TypeScript Usage

@typescript_rules [
    {
        "id": "strict_typing",
        "rule": "Use strict typing - no 'any' type except in tests or third-party integrations",
        "severity": "error"
    },
    {
        "id": "discriminated_unions",
        "rule": "Use discriminated unions for complex state management",
        "severity": "suggestion"
    },
    {
        "id": "prefer_interfaces",
        "rule": "Use interfaces for object shapes that will be extended or implemented",
        "severity": "warning"
    },
    {
        "id": "prefer_types",
        "rule": "Use type aliases for function signatures, primitives, unions, and mapped types",
        "severity": "warning"
    },
    {
        "id": "type_exports",
        "rule": "Centralize and re-export types from a types.ts file",
        "severity": "suggestion"
    }
]

### Modern JavaScript

@javascript_rules {
    "prefer": [
        "Arrow functions for callbacks and anonymous functions",
        "Async/await over promises chaining",
        "Object/array destructuring",
        "Nullish coalescing (??) and optional chaining (?.)",
        "Template literals over string concatenation"
    ],
    "avoid": [
        "var - use const by default, let when necessary",
        "Function expressions where arrow functions are clearer",
        "this binding when not necessary"
    ]
}

## React Best Practices

@react_rules {
    "hooks": {
        "dependencies": "Always specify exhaustive dependencies array",
        "extraction": "Extract complex logic into custom hooks",
        "order": "Use consistent hook ordering: useState, useReducer, useContext, then others"
    },
    "performance": {
        "memoization": "Use React.memo, useMemo, and useCallback judiciously",
        "rendering": "Avoid expensive operations in render",
        "lists": "Always use stable keys for list items"
    },
    "state": {
        "local_vs_global": "Keep state as local as possible",
        "derived_state": "Calculate derived state during render",
        "immutability": "Always update state immutably"
    }
}

## Testing Guidelines

@testing_rules {
    "unit_tests": {
        "scope": "Test functionality, not implementation",
        "isolation": "Mock dependencies for true unit testing",
        "naming": "describe('Component/Function'), it('should behavior')"
    },
    "coverage": {
        "minimum": "Aim for at least 80% code coverage",
        "critical": "100% coverage for critical business logic"
    },
    "patterns": {
        "arrange_act_assert": "Structure tests with AAA pattern",
        "data_providers": "Use parameterized tests for multiple test cases"
    }
}

## Performance Optimization

@performance_rules [
    {
        "id": "image_optimization",
        "rule": "Optimize images for production",
        "severity": "warning"
    },
    {
        "id": "lazy_loading",
        "rule": "Implement lazy loading for non-critical components",
        "severity": "suggestion"
    },
    {
        "id": "code_splitting",
        "rule": "Use code splitting for large applications",
        "severity": "suggestion"
    },
    {
        "id": "render_optimization",
        "rule": "Avoid unnecessary re-renders by optimizing component structure",
        "severity": "warning"
    }
]

## Security Practices

@security_rules {
    "input_validation": "Always validate user input on both client and server",
    "authentication": "Follow OAuth 2.0 best practices for authentication",
    "csrf_protection": "Implement CSRF protection on forms",
    "content_security": "Set up proper Content Security Policy headers",
    "dependencies": "Regularly update and audit dependencies"
}

## Docker Guidelines

@docker_rules {
    "images": {
        "base": "Use specific version tags for base images",
        "multi_stage": "Implement multi-stage builds for production images",
        "minimal": "Keep images minimal - only include what's necessary"
    },
    "dockerfiles": {
        "order": "Order instructions to maximize layer caching",
        "cmd_vs_entrypoint": "Use ENTRYPOINT for executables, CMD for default arguments",
        "user": "Run containers as non-root users"
    },
    "compose": {
        "env_files": "Use .env files for environment variables",
        "networks": "Define custom networks for service isolation",
        "volumes": "Use named volumes for persistence"
    }
}

## Accessibility Standards

@accessibility_rules [
    {
        "id": "semantic_html",
        "rule": "Use semantic HTML elements",
        "severity": "warning"
    },
    {
        "id": "aria_attributes",
        "rule": "Use ARIA attributes when semantic HTML is insufficient",
        "severity": "warning"
    },
    {
        "id": "keyboard_navigation",
        "rule": "Ensure all interactive elements are keyboard accessible",
        "severity": "error"
    },
    {
        "id": "focus_management",
        "rule": "Implement proper focus management for modals and dynamic content",
        "severity": "warning"
    },
    {
        "id": "color_contrast",
        "rule": "Maintain WCAG 2.1 AA compliant color contrast",
        "severity": "warning"
    }
]

## Examples

@examples {
    "component_structure": {
        "description": "React component with proper structure",
        "code": `
// UserProfile.tsx
import React, { useState, useEffect } from 'react';
import { Avatar } from '@/components/common';
import { fetchUserData } from '@/api/users';
import { formatDate } from '@/utils/date';

// Types
interface UserProfileProps {
  userId: string;
  showActivity?: boolean;
}

// Component
const UserProfile: React.FC<UserProfileProps> = ({ userId, showActivity = false }) => {
  // State
  const [userData, setUserData] = useState<UserData | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);

  // Helper functions
  const formatUserActivity = (activity: Activity[]) => {
    return activity
      .filter(item => item.visible)
      .map(item => ({
        ...item,
        date: formatDate(item.timestamp)
      }));
  };

  // Effects
  useEffect(() => {
    const loadUserData = async () => {
      try {
        setIsLoading(true);
        const data = await fetchUserData(userId);
        setUserData(data);
      } catch (err) {
        setError('Failed to load user data');
        console.error(err);
      } finally {
        setIsLoading(false);
      }
    };

    loadUserData();
  }, [userId]);

  // Render methods
  if (isLoading) return <div className="loading-spinner" />;
  if (error) return <div className="error-message">{error}</div>;
  if (!userData) return null;

  return (
    <div className="user-profile">
      <Avatar src={userData.avatarUrl} size="large" />
      <h2>{userData.name}</h2>
      <p>{userData.bio}</p>

      {showActivity && (
        <div className="user-activity">
          <h3>Recent Activity</h3>
          {formatUserActivity(userData.activity).map(item => (
            <div key={item.id} className="activity-item">
              {item.description} - {item.date}
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default UserProfile;
        `
    },
    "commit_messages": {
        "good": [
            "feat(auth): add OAuth2 login flow",
            "fix(payments): resolve double-charging issue",
            "docs(readme): update installation steps",
            "refactor(api): simplify user validation logic",
            "perf(images): optimize image loading on homepage"
        ],
        "bad": [
            "fixed stuff",
            "WIP",
            "Updates",
            "New feature",
            "Fixed the thing John mentioned yesterday"
        ]
    }
}

## Best Practices

@best_practices {
    "code_reviews": {
        "focus": "Look for correctness, maintainability, and performance",
        "attitude": "Be constructive and specific",
        "scope": "Review in small batches for higher quality feedback"
    },
    "documentation": {
        "frequency": "Document as you code, not after",
        "audience": "Write for future developers (including yourself)",
        "updates": "Update documentation when changing code"
    },
    "coding": {
        "simplicity": "Prefer simple, readable solutions over clever ones",
        "consistency": "Follow established patterns within the project",
        "technical_debt": "Address technical debt regularly"
    }
}

@version "1.0.0"
@last_updated "2024-03-09"

<rule>
name: conventional_commits
description: Guide commit messages to follow the conventional commits format
filters:
  - type: event
    pattern: "commit_message_input"
  - type: intent
    pattern: "commit_changes"

actions:
  - type: suggest
    message: |
      Format your commit message using conventional commits:

      <type>(<scope>): <description>

      Types:
      - feat: New feature
      - fix: Bug fix
      - docs: Documentation changes
      - style: Code style/formatting
      - refactor: Code restructuring
      - perf: Performance improvements
      - test: Adding/fixing tests
      - chore: Maintenance tasks

      Examples:
      - feat(auth): add user authentication system
      - fix(api): correct response status code
      - docs(readme): update installation instructions

examples:
  - input: "Added login function"
    output: "feat(auth): add login function"
  - input: "Fixed bug in API response"
    output: "fix(api): correct response status code"

metadata:
  priority: high
  version: 1.0
</rule>

<rule>
name: code_documentation
description: Ensure proper documentation for functions, classes, and modules
filters:
  - type: file_extension
    pattern: "\.(js|ts|py|java|c|cpp|go|rb)$"
  - type: content
    pattern: "(function|class|def|interface)"

actions:
  - type: suggest
    message: |
      Remember to document your code with:

      1. Function/class purpose description
      2. Parameters and return values
      3. Usage examples for complex functions
      4. Edge cases and error handling

      Use the standard format for your language:
      - JSDoc for JavaScript/TypeScript
      - Docstrings for Python
      - Javadoc for Java
      - Godoc for Go

  - type: reject
    conditions:
      - pattern: "(function|class|def) [A-Za-z0-9_]+\\([^\\)]*\\)\\s*\\{(?![\\s\\S]*\\/\\*\\*|[\\s\\S]*\"\"\"|[\\s\\S]*\\/\\/)"
        message: "Missing documentation for this function/class"

examples:
  - input: |
      function calculateTotal(prices) {
        return prices.reduce((sum, price) => sum + price, 0);
      }
    output: |
      /**
       * Calculates the sum of all prices
       * @param {number[]} prices - Array of prices to sum
       * @returns {number} The total sum
       */
      function calculateTotal(prices) {
        return prices.reduce((sum, price) => sum + price, 0);
      }

metadata:
  priority: medium
  version: 1.0
</rule>

<rule>
name: error_handling
description: Ensure proper error handling in code
filters:
  - type: file_extension
    pattern: "\.(js|ts|py|java|c|cpp|go|rb)$"
  - type: content
    pattern: "(try|catch|throw|except|raise|error|throw new Error)"

actions:
  - type: suggest
    message: |
      Best practices for error handling:

      1. Use specific error types/classes
      2. Include informative error messages
      3. Log errors with contextual information
      4. Handle errors at appropriate levels
      5. Avoid empty catch blocks
      6. Consider recovery strategies

      Remember to document error scenarios in function/method documentation.

  - type: reject
    conditions:
      - pattern: "catch\\s*\\([^\\)]*\\)\\s*\\{\\s*\\}"
        message: "Empty catch block - handle or at least log the error"
      - pattern: "catch\\s*\\([^\\)]*\\)\\s*\\{\\s*console\\.log"
        message: "Consider using proper logging instead of console.log for errors"

examples:
  - input: |
      try {
        riskyOperation();
      } catch (err) {
        // Silent fail
      }
    output: |
      try {
        riskyOperation();
      } catch (err) {
        logger.error('Failed to perform risky operation', { error: err.message, stack: err.stack });
        // Consider recovery logic or proper propagation
      }

metadata:
  priority: high
  version: 1.0
</rule>

<rule>
name: testing_reminder
description: Remind to write tests for new code
filters:
  - type: event
    pattern: "file_create"
  - type: file_extension
    pattern: "\.(js|ts|py|java|c|cpp|go|rb)$"
  - type: content
    pattern: "(function|class|def|interface)"

actions:
  - type: suggest
    message: |
      Remember to write tests for this new code:

      1. Unit tests for individual functions/methods
      2. Integration tests for component interactions
      3. Edge cases and error scenarios
      4. Consider test-driven development (TDD)

      Testing frameworks by language:
      - JavaScript/TypeScript: Jest, Mocha, Jasmine
      - Python: pytest, unittest
      - Java: JUnit, TestNG
      - Go: Go testing package
      - Ruby: RSpec, Minitest

examples:
  - input: "Created new authentication service"
    output: "Don't forget to write tests for the authentication service, including successful login, failed login attempts, and edge cases."

metadata:
  priority: medium
  version: 1.0
</rule>

<rule>
name: dockerfile_best_practices
description: Enforce best practices for Dockerfile creation and maintenance
filters:
  - type: file_name
    pattern: "^Dockerfile$|^Dockerfile\\.[a-zA-Z0-9_-]+$"
  - type: content
    pattern: "FROM|RUN|COPY|ADD|ENTRYPOINT|CMD"

actions:
  - type: suggest
    message: |
      Dockerfile best practices:

      1. Use specific base image tags (avoid `latest`)
      2. Group related commands with `&&` to reduce layers
      3. Use multi-stage builds to reduce final image size
      4. Remove unnecessary files after package installation
      5. Use .dockerignore file to exclude irrelevant files
      6. Place frequently changing instructions later in Dockerfile
      7. Use COPY instead of ADD unless extraction is needed
      8. Set proper USER to avoid running as root
      9. Use HEALTHCHECK to verify container health
      10. Include proper LABELS for metadata

      Example multi-stage build:
      ```dockerfile
      # Build stage
      FROM node:16-alpine AS build
      WORKDIR /app
      COPY package*.json ./
      RUN npm ci
      COPY . .
      RUN npm run build

      # Production stage
      FROM node:16-alpine
      WORKDIR /app
      COPY --from=build /app/dist ./dist
      COPY --from=build /app/package*.json ./
      RUN npm ci --only=production
      USER node
      CMD ["node", "dist/index.js"]
      ```

  - type: reject
    conditions:
      - pattern: "FROM .*:latest"
        message: "Avoid using 'latest' tag - specify a version for reproducible builds"
      - pattern: "ADD (?!https?://|tar|zip)"
        message: "Use COPY instead of ADD unless retrieving remote files or extracting archives"
      - pattern: "RUN apt-get (update|install)(?!.*apt-get clean)"
        message: "Clean apt cache after installation to reduce image size"
      - pattern: "RUN npm install"
        message: "Use 'npm ci' for reproducible builds in Docker"

examples:
  - input: |
      FROM ubuntu:latest
      RUN apt-get update
      RUN apt-get install -y nginx
      ADD app.tar.gz /app
      CMD ["nginx", "-g", "daemon off;"]
    output: |
      FROM ubuntu:22.04
      RUN apt-get update && \
          apt-get install -y nginx && \
          apt-get clean && \
          rm -rf /var/lib/apt/lists/*
      ADD app.tar.gz /app
      EXPOSE 80
      USER nginx
      CMD ["nginx", "-g", "daemon off;"]

metadata:
  priority: high
  version: 1.0
</rule>

<rule>
name: gitignore_standards
description: Ensure proper .gitignore configuration
filters:
  - type: file_name
    pattern: "^\\.gitignore$"
  - type: event
    pattern: "repository_create"

actions:
  - type: suggest
    message: |
      Remember to include appropriate entries in .gitignore:

      1. Language-specific build artifacts and dependencies
         - node_modules/, venv/, target/, etc.
      2. Editor and IDE files
         - .vscode/, .idea/, *.swp, etc.
      3. Operating system files
         - .DS_Store, Thumbs.db, etc.
      4. Build outputs and logs
         - dist/, build/, logs/, *.log
      5. Sensitive information
         - .env, credentials.json, etc.

      Consider using gitignore.io to generate a comprehensive .gitignore for your tech stack.

examples:
  - input: "Setting up a new Node.js project"
    output: |
      Make sure your .gitignore includes:

      # Dependencies
      node_modules/

      # Build outputs
      dist/
      build/

      # Environment variables
      .env
      *.env.local

      # Logs
      logs/
      *.log

      # Editor settings
      .vscode/
      .idea/

      # OS files
      .DS_Store
      Thumbs.db

metadata:
  priority: medium
  version: 1.0
</rule>
